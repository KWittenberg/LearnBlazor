@page "/lifecycle"
@using System.Threading

<PageTitle>LifeCycle</PageTitle>

<h3 class="mb-5 text-primary">Blazor LifeCycle</h3>

<div class="p-4 bg-light border rounded-3">
    @* <p role="status">Current count: @currentCount</p> *@
    <b>@currentCount</b>
    <button class="ms-5 btn btn-primary" @onclick="IncrementCount">Click me</button>
</div>

<div class="mt-2 p-4 bg-light border rounded-3">
    <b>@count</b>
    <button class="ms-5 btn btn-primary" @onclick="StartCountdown">Start Countdown</button>
</div>


<h5 class="mt-5 text-primary">Event Type - Called</h5>
<div class="p-4 bg-light border rounded-3">
    @foreach (var item in EventType)
    {
        <p>@item</p>
    }
</div>

<_LifeCycleChildComponent CountValue="@currentCount">
</_LifeCycleChildComponent>



@code {

    private int currentCount = 0;
    private int count = 3;

    List<string> EventType = new List<string>();


    private void IncrementCount()
    {
        currentCount++;
    }



    protected override void OnInitialized()
    {
        EventType.Add("1 - OnInitialized is called");
    }

    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(2000);
        EventType.Add("2 - OnInitializedAsync is called");
    }

    protected override void OnParametersSet()
    {
        EventType.Add("3 - OnParametersSet is called");
    }

    protected override async Task OnParametersSetAsync()
    {
        //await Task.Delay(2000);
        EventType.Add("4 - OnParametersSetAsync is called");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        EventType.Add("5 - OnAfterRender is called");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await Task.Delay(2000);
        EventType.Add("6 - OnAfterRenderAsync is called");
    }

    protected override bool ShouldRender()
    {
        EventType.Add("7 - ShouldRender is called");
        return true;
    }



    private void StartCountdown()
    {
        var timer = new Timer(TimeCallBack, null, 1000, 1000);
    }

    private void TimeCallBack(object state)
    {
        if (count > 0)
        {
            count--;
            InvokeAsync(StateHasChanged);
        }
    }
}